import cTools.KernelWrapper;
import java.util.LinkedList;

public class Tail{
	private static int amt = -10;
	private static boolean stdin = false;
	public static void main(String[] args){
		
		final var filenames = new LinkedList<String>();
		for(int i = 0; i< args.length; i++){
			switch(args[i]){
				case "-n":
					handleMinusN(i);
					break;
				case "--help":
					printHelp();
					KernelWrapper.exit(0);
					break;
				case "":
					break;
				default:
					filenames.add(args[i]);
					break;
			}
		}

		if(filenames.size()<1){
			tailSingle("-");
		} else if (filenames.size()<2){
			tailSingle(filenames.element());
		} else {
			tailAll(filenames);
		}
		KernelWrapper.exit(0);
	}
	private static void stdInModu
	private static void tailSingle(String filename){
		if("-".equals(filename)){
			
	}
	
	private static void tailAll(LinkedList<String> filenames){
		for(final var fn : filenames){
			System.out.printf("==> %s <==", "-".equals(fn) ? "standard input" : fn);
			tailSingle(fn);
		}
	}

	private static void handleMinusN(String[] args, int index){
		args[index] = "";
		try{
			if(args[index+1].matches("\\d+")){
				args[index+1] = "-" + args[index+1];
			}
			args = Integer.valueOf(args[index+1]);
			args[index+1] = "";
		} catch(NumberFormatException e){
			System.err.printf("invalid number of lines: '%s'\n", args[index+1]);
			args[index+1] = "";
		} catch(ArrayIndexOutOfBoundsException e){
			System.err.println("option requires an argument -- 'n'\nTry 'tail --help' for more information.");
		}
	}
	public static void printHelp(){
		System.out.println(
			"Tail help!\n"+
			" tail asd.txt : print last 10 lines of asd.txt\n"+
			" tail asd.txt -n 3 : print last 3 lines\n"+
			" tail asd.txt -n +3 : print everything from line 3\n"+
			" tail - : waiting for filenames on StdIn \n"+
			" tail - : waiting for filenames on StdIn \n"+
			" tail - : waiting for filenames on StdIn \n"+
			" tail - : waiting for filenames on StdIn \n"+
			" tail --help : print this help\n");
	}
}
